package com.restaupons.BusinessLogic;

import android.util.Log;

import com.restaupons.NetworkService.RestauponsCallback;
import com.restaupons.NetworkService.RetrofitHelper;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.LinkedHashMap;

/**
 * Created by saranraj.d on 12/12/2017.
 */

public class RegisterCoupner {

    static RetrofitHelper retrofitHelper;

    static void setApi() {
        if (retrofitHelper == null)
            retrofitHelper = new RetrofitHelper();
    }


    public static void coupnerRegistration(final RestauponsCallback restauponsCallback, String first_name, String last_name, String user_email,
                                           String user_phone, String user_name, String user_password) {

        setApi();
        LinkedHashMap<String, String> hashMap = new LinkedHashMap<>();
        hashMap.put("first_name", first_name);
        hashMap.put("last_name", last_name);
        hashMap.put("user_email", user_email);
        hashMap.put("user_phone", user_phone);
        hashMap.put("user_name", user_name);
        hashMap.put("user_password", user_password);

        retrofitHelper.callApiPOSTJSON("couponer_register", String.class, new RestauponsCallback() {
            @Override
            public void success(Object s) {
                String responce_msg = null;
                String reg_msg = s.toString();
                Log.d("couponer_register", "success: " + s.toString());
                try {
                    JSONObject jsonObject = new JSONObject(reg_msg);
                    responce_msg = jsonObject.getString("responce_msg");
                    Log.d("_D", "success: " + responce_msg);
                } catch (JSONException e) {
                    e.printStackTrace();
                    Log.d("_D", "catch: " + e);

                }

                restauponsCallback.success(responce_msg);
            }

            @Override
            public void failure(String s) {
                Log.d("couponer_register", "failure: " + s.toString());
                restauponsCallback.failure(s);

            }
        }, hashMap);
    }
}



..................................................................................................................

package com.restaupons.NetworkService;

import android.net.Uri;
import android.util.Log;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.restaupons.Util.SCONSTANTS;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

import static com.google.android.gms.wearable.DataMap.TAG;

public class RetrofitHelper {
    Retrofit retrofit;
    String baseUrl = SCONSTANTS.BASE_URL;

    final OkHttpClient okHttpClient = new OkHttpClient.Builder()
            .readTimeout(60, TimeUnit.SECONDS)
            .connectTimeout(60, TimeUnit.SECONDS)
            .build();

    Gson gson = new GsonBuilder()
            .setLenient()
            .create();


    public RetrofitHelper() {
        retrofit = new Retrofit.Builder()
                .baseUrl(baseUrl)
                .addConverterFactory(GsonConverterFactory.create(gson))
                .client(okHttpClient)
                .build();
    }

    public RetrofitHelper(String Url) {
        retrofit = new Retrofit.Builder()
                .baseUrl(Url)
                .client(okHttpClient)
                .build();
    }

    public <E> void callApiPOSTJSON(String function, final Class classname, final RestauponsCallback callback, HashMap<String, String> args) {
        ApiEndPoints apiEndPoints = retrofit.create(ApiEndPoints.class);
        try {
            Method methodname = apiEndPoints.getClass().getDeclaredMethod(function, Map.class);
            Log.e("prasanth", new Gson().toJson(args));
            Call<ResponseBody> mycall = (Call<ResponseBody>) methodname.invoke(apiEndPoints, args);
            mycall.enqueue(new Callback<ResponseBody>() {
                @Override
                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                    try {
                        Log.e("prasanth", call.request().url().toString());
                        if (classname == String.class && response.code() == 200) {
                            callback.success(response.body().string());
                            return;
                        }
                        if (response.code() != 200) {

                            if (response.code() == 401) {
                                String responce_msg = null;
//                                Log.d("_D", "onResponse: 401 "+response.errorBody().string());
                                try {
//                                    String errormsg = response.errorBody().string();

                                    JSONObject jsonObject = new JSONObject(response.errorBody().string());
                                    responce_msg = jsonObject.getString("msg");
                                    Log.d("_D", "success: " + responce_msg);
                                    callback.failure(responce_msg);
                                    return;
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Log.d("_D", "catch: " + e);
                                    callback.failure("Invalid Credential.");
                                }
                            } else if (response.code() == 402) {
                                callback.failure("402");
                            } else {
                                callback.failure(response.errorBody().string());
                            }

                        }
                        String xmlstring = response.body().string();
                        try {
                            E menuobj = (E) new Gson().fromJson(xmlstring, classname);
                            Log.e("prasanth", menuobj.toString());
                            callback.success(menuobj);
                        } catch (Exception e) {
                            Log.e("JSON exception", e.getMessage());
                            callback.failure(e.toString());
                        }
                    } catch (Exception e) {
                        callback.failure(e.toString());
                    }
                }

                @Override
                public void onFailure(Call<ResponseBody> call, Throwable t) {
                    Log.e("_D", "onResponse: " + t.getMessage());
                    callback.failure(t.getMessage());

                }
            });
        } catch (Exception e) {
            callback.failure(e.toString());
        }

    }

    public <E> void callApiPOSTJSONUpload(String function, final Class classname, final RestauponsCallback callback, HashMap<String, String> args, Uri file) {
        ApiEndPoints apiEndPoints = retrofit.create(ApiEndPoints.class);
        try {
            MultipartBody.Part imagenPerfil = null;
            if (file != null) {
                File file1 = new File(file.getPath());
                Log.i("Register", "Nombre del archivo " + file1.getName());
                // create RequestBody instance from file
                RequestBody requestFile =
                        RequestBody.create(MediaType.parse("multipart/form-data"), file1);
                // MultipartBody.Part is used to send also the actual file name
                imagenPerfil = MultipartBody.Part.createFormData("imagenPerfil", file1.getName(), requestFile);
            }

            Method methodname = apiEndPoints.getClass().getDeclaredMethod(function, Map.class, MultipartBody.Part.class);
            Call<ResponseBody> mycall = (Call<ResponseBody>) methodname.invoke(apiEndPoints, args, imagenPerfil);
            mycall.enqueue(new Callback<ResponseBody>() {
                @Override
                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                    try {
                        Log.e("prasanth", call.request().url().toString());
                        if (classname == String.class) {
                            callback.success(response.body().string());
                            return;
                        }
                        if (response.code() != 200) {
                            if (response.code() == 401) {
                                String responce_msg = null;
                                try {
                                    JSONObject jsonObject = new JSONObject(response.errorBody().string());
                                    responce_msg = jsonObject.getString("msg");
                                    Log.d("_D", "success: " + responce_msg);
                                    callback.failure(responce_msg);
                                    return;
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                    Log.d("_D", "catch: " + e);

                                }
                            } else {
                                callback.failure(response.errorBody().string());
                            }

                        }
                        String xmlstring = response.body().string();
                        try {
                            E menuobj = (E) new Gson().fromJson(xmlstring, classname);
                            Log.e("prasanth", menuobj.toString());
                            callback.success(menuobj);
                        } catch (Exception e) {
                            Log.e("JSON exception", e.getMessage());
                            callback.failure(e.toString());
                        }
                    } catch (Exception e) {
                        callback.failure(e.toString());
                    }
                }

                @Override
                public void onFailure(Call<ResponseBody> call, Throwable t) {
                    Log.e("_D", "onResponse: " + t.getMessage());
                    callback.failure(t.getMessage());

                }
            });
        } catch (Exception e) {
            callback.failure(e.toString());
        }

    }

    public <E> void callApiGETJSON(String function, final Class classname, final RestauponsCallback callback, HashMap<String, String> args) {
        ApiEndPoints apiEndPoints = retrofit.create(ApiEndPoints.class);
        try {
            Method methodname = apiEndPoints.getClass().getDeclaredMethod(function, Map.class);
            Call<ResponseBody> mycall = (Call<ResponseBody>) methodname.invoke(apiEndPoints, args);
            mycall.enqueue(new Callback<ResponseBody>() {
                @Override
                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                    try {
                        Log.e("prasanth", call.request().url().toString());
                        ResponseBody xmlstring = response.body();
                        if (classname == String.class) {
                            callback.success(response.body().string());
                            return;
                        }
                        Log.e("_D", "onResponse: " + xmlstring);
                        try {
                            E menuobj = (E) new Gson().fromJson(xmlstring.string(), classname);
                            Log.e("prasanth", menuobj.toString());
                            callback.success(menuobj);
                        } catch (Exception e) {
                            Log.e("JSON exception", e.getMessage());
                            callback.failure(e.toString());
                        }
                    } catch (Exception e) {
                        callback.failure(e.toString());
                    }
                }

                @Override
                public void onFailure(Call<ResponseBody> call, Throwable t) {
                    Log.e("prasanth", call.request().url().toString());
                    Log.e("prasanth", "onFailure: " + t.getMessage());
                    callback.failure(t.getMessage());

                }
            });
        } catch (Exception e) {
            callback.failure(e.toString());
        }

    }

    public <E> void callApiGETModel(String function, final Class classname, final RestauponsCallback callback, HashMap<String, String> args) {
        ApiEndPoints apiEndPoints = retrofit.create(ApiEndPoints.class);
        try {
            Method methodname = apiEndPoints.getClass().getDeclaredMethod(function, Map.class);
            Call<ResponseBody> mycall = (Call<ResponseBody>) methodname.invoke(apiEndPoints, args);
            mycall.enqueue(new Callback<ResponseBody>() {
                @Override
                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                    try {
                        Log.e("prasanth", call.request().url().toString());
                        if (classname == String.class) {
                            callback.success(response.body().string());
                            return;
                        }
                        if (response.code() != 200) {
                            if (response.code() == 401) {
                                String responce_msg = null;
                                try {
                                    JSONObject jsonObject = new JSONObject(response.errorBody().string());
                                    responce_msg = jsonObject.getString("msg");
                                    Log.d("_D", "success: " + responce_msg);
                                    callback.failure(responce_msg);
                                    return;
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                    Log.d("_D", "catch: " + e);

                                }
                            } else {
                                callback.failure(response.errorBody().string());
                            }

                        }
                        String xmlstring = response.body().string();
                        try {
                            E menuobj = (E) new Gson().fromJson(xmlstring, classname);
                            Log.e("prasanth", menuobj.toString());
                            callback.success(menuobj);
                        } catch (Exception e) {
                            Log.e("JSON exception", e.getMessage());
                            callback.failure(e.toString());
                        }
                    } catch (Exception e) {
                        callback.failure(e.toString());
                    }
                }

                @Override
                public void onFailure(Call<ResponseBody> call, Throwable t) {
                    Log.e("prasanth", call.request().url().toString());
                    Log.e("prasanth", "onFailure: " + t.getMessage());
                    callback.failure(t.getMessage());

                }
            });
        } catch (Exception e) {
            callback.failure(e.toString());
        }

    }


    public void uploadResturantner(HashMap<String, String> args, File lic_file, final RestauponsCallback restauponsCallback) {
        ApiEndPoints apiEndPoints = retrofit.create(ApiEndPoints.class);
        Log.e("prasanth", new Gson().toJson(args));
        RequestBody first_name = RequestBody.create(MediaType.parse("text/plain"), args.get("first_name"));
        RequestBody last_name = RequestBody.create(MediaType.parse("text/plain"), args.get("last_name"));
        RequestBody user_email = RequestBody.create(MediaType.parse("text/plain"), args.get("user_email"));
        RequestBody user_name = RequestBody.create(MediaType.parse("text/plain"), args.get("user_name"));
        RequestBody user_password = RequestBody.create(MediaType.parse("text/plain"), args.get("user_password"));
        RequestBody restaurant_name = RequestBody.create(MediaType.parse("text/plain"), args.get("restaurant_name"));
        RequestBody restaurant_phone = RequestBody.create(MediaType.parse("text/plain"), args.get("restaurant_phone"));
        RequestBody restaurant_email = RequestBody.create(MediaType.parse("text/plain"), args.get("restaurant_email"));
        RequestBody restaurant_website = RequestBody.create(MediaType.parse("text/plain"), args.get("restaurant_website"));
        RequestBody restaurant_lat = RequestBody.create(MediaType.parse("text/plain"), args.get("restaurant_lat"));
        RequestBody restaurant_long = RequestBody.create(MediaType.parse("text/plain"), args.get("restaurant_long"));
        RequestBody restaurant_category = RequestBody.create(MediaType.parse("text/plain"), args.get("restaurant_category"));


        RequestBody reqFile = RequestBody.create(MediaType.parse("*/*"), lic_file);
        MultipartBody.Part body = MultipartBody.Part.createFormData("restaurant_license", lic_file.getName(), reqFile);
        RequestBody name = RequestBody.create(MediaType.parse("text/plain"), "upload_test");
//        Call<ResponseBody> resturantnerCall = apiEndPoints.restauranter_register(args,body);
        Call<ResponseBody> resturantnerCall = apiEndPoints.restauranter_register(first_name, last_name, user_email, user_name, user_password, restaurant_name, restaurant_phone,
                restaurant_email, restaurant_website, restaurant_lat, restaurant_long, restaurant_category, body);
        resturantnerCall.enqueue(new Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {

                Log.d(TAG, "onResponse: " + response.code());
                if (response.code() == 200) {
                    String responce_msg;
                    try {
                        JSONObject jsonObject = new JSONObject(response.body().string());
                        responce_msg = jsonObject.getString("responce_msg");
                        restauponsCallback.success(responce_msg);
                    } catch (IOException e) {
                        e.printStackTrace();
                        restauponsCallback.failure(e.getMessage());

                    } catch (JSONException e) {
                        restauponsCallback.failure(e.getMessage());

                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                Log.d(TAG, "onResponse: " + t.getMessage());
                restauponsCallback.failure("faild");

            }
        });

    }

    public void editprofile(HashMap<String, String> args, File lic_file, final RestauponsCallback restauponsCallback) {
        ApiEndPoints apiEndPoints = retrofit.create(ApiEndPoints.class);


        RequestBody reqFile = RequestBody.create(MediaType.parse("*/*"), lic_file);
        MultipartBody.Part body = MultipartBody.Part.createFormData("profile_image", lic_file.getName(), reqFile);

        Call<ResponseBody> resturantnerCall = apiEndPoints.editprofile(args, body);
        resturantnerCall.enqueue(new Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {

                Log.d(TAG, "onResponse: " + response.code());
                if (response.code() == 200) {
                    String responce_msg;
                    try {
                        JSONObject jsonObject = new JSONObject(response.body().string());
                        responce_msg = jsonObject.getString("responce_msg");
                        restauponsCallback.success(responce_msg);
                    } catch (IOException e) {
                        e.printStackTrace();
                        restauponsCallback.failure(e.getMessage());

                    } catch (JSONException e) {
                        restauponsCallback.failure(e.getMessage());

                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                Log.d(TAG, "onResponse: " + t.getMessage());
                restauponsCallback.failure("faild");

            }
        });

    }


}
